name: Workflow 3 => Publish jar as artifact
on:
  # Este workflow se ejecuta cuando se recibe un evento de tipo 'repository_dispatch' con el tipo 'publish-artifact-event'
  # Este evento se dispara desde otro workflow, en este caso, desde el workflow 'builds-features-2.yaml'
  # y se utiliza para notificar que se ha publicado un artefacto y que este workflow debe ejecutarse para publicar el artefacto
  # generado
  repository_dispatch:
    types: [publish-artifact-event]
jobs:
  job-1-workflow-3-download-artifact-job:
    runs-on: ubuntu-latest
    env:
      ARTIFACT_NAME: 'customer-0.0.1-SNAPSHOT.jar'
    permissions:
      contents: write
      pull-requests: write
      
    steps:      
      - name: Debug Payload
        run: |     
         echo ${{ github.event.client_payload.base_branch }}
               
      ########################################################
      # 1- Dolowload source code from default branch in order to retrive Dockerfile, and apload it as docker
      # build context
      ########################################################
      
      - uses: actions/checkout@v3  
        with:
          ref: ${{ github.event.client_payload.base_branch }}
          fetch-depth: 0      

      - name: check last hashid # This step is used to check the last two commits in the repository, and ensure
      # that the code is being built from the latest changes
        run: |
          git log -2 

      ########################################################
      # 2- setup java 17 and check that source code is buildable
      ########################################################
      - name: setup java 17 
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: build with maven
        #The "SNAPSHOT" term means that the build is a snapshot of your code at a given time    
        #The --batch-mode flag indicates that the build should be run without any user interaction
        #(Avoid caching versions of your own code)The --update-snapshots flag tells Maven to check for any updated snapshots
        #of dependencies and use those instead of the versions specified in the project's pom.xml file. 
        #The package argument tells Maven to package the project into a distributable format, such as a JAR or WAR file.
        run: |
           mvn clean test package -DskipTests=true --batch-mode --update-snapshots      
           echo ls -R target/
           echo ls -la 
    
             
      ###########################################################
      # 3- publish it as artifact
      ######################################################## 
      - name: Publish Package
        if: success() # This step is executed only if the previous steps were successful
        uses: actions/upload-artifact@v4 # This Action uploads the generated artifact to GitHub Actions
        with:
         name: artifactjar # Name of the artifact to be uploaded
         path: ${{ github.workspace }}/target/${{ env.ARTIFACT_NAME }}   # Path to the artifact to be uploaded

      #########################################################
      # 4- call checksum of artifact

      # Este paso se encarga de calcular el checksum del artefacto generado y lo guarda en una variable de entorno
      # que se utilizará en el siguiente job para enviar el checksum junto con el artefacto al repositorio
      # Este paso es importante para verificar la integridad del artefacto
      # y asegurarse de que no ha sido modificado o corrompido durante el proceso de construcción y publicación
      # del artefacto. El checksum se utiliza para verificar que el artefacto descargado es el mismo que el que se subió
      # y que no ha habido ningún error en el proceso de construcción y publicación.
      # Este paso es importante para garantizar la integridad del artefacto y asegurar que se puede confiar en él
      # para su uso posterior en otros workflows o en la producción.
      # El checksum se calcula utilizando el comando `sha1sum` y se guarda en una variable de entorno llamada `JSON_PAYLOAD`
      # que se utiliza en el siguiente job para enviar el checksum junto con el artefacto
      # al repositorio. 
      #########################################################
      - name: Verify SHA1sum 
        if: success()
        id: cal_checksum_jar
        run: |
          ls -la ${{ github.workspace }}/target/
          SHA1=$(sha1sum ${{ github.workspace }}/target/$ARTIFACT_NAME | awk '{print $1}')
          JSON=\''{"message": "publish artifact", "artifact_name":"'"$ARTIFACT_NAME"'", "checksum": "'"$SHA1"'"}'\'
          echo JSON_PAYLOAD=$(printf '%s\n' "$JSON") >> $GITHUB_ENV

      #########################################################
      # 5- call deploy-artifact.yaml

      # Este paso se encarga de llamar al workflow 'deploy-artifact.yaml' que se encarga de desplegar el artefacto generado
      # Este paso es importante para que el artefacto generado se pueda utilizar en otros workflows
      # o en la producción. El workflow 'deploy-artifact.yaml' se encarga de desplegar el artefacto generado
      # y asegurarse de que está disponible para su uso
      # Este paso utiliza la acción 'peter-evans/repository-dispatch@v2' para enviar un evento de tipo 
      # 'deploy-artifact-event' al repositorio, lo que desencadena la ejecución del workflow 'deploy-artifact.yaml'
      # El evento enviado incluye el payload
      # que contiene el nombre del artefacto y el checksum del artefacto generado
      # Esto permite que el workflow 'deploy-artifact.yaml' reciba el artefacto
      # y el checksum del artefacto generado y lo despliegue correctamente.
      #########################################################
      - name: trigger deploy artifact
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: deploy-artifact-event
          client-payload: ${{ fromJSON(env.JSON_PAYLOAD) }}